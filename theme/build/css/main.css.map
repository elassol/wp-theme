{"version":3,"sources":["../../bower_components/reset-scss/reset.scss","_typography.scss","_layout.scss","../../bower_components/susy/sass/susy/output/support/_rem.scss","../../bower_components/susy/sass/susy/language/susy/_container.scss","../../bower_components/susy/sass/susy/output/support/_background.scss","../../bower_components/susy/sass/susy/language/susy/_background.scss","../../bower_components/susy/sass/susy/language/susy/_span.scss","../../bower_components/susy/sass/susy/output/shared/_background.scss","../../bower_components/susy/sass/susy/output/support/_clearfix.scss","../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../bower_components/susy/sass/susy/language/susy/_gutters.scss","_shame.scss","main.scss","_variables.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}","@function calculateRem($size) {\n  $remSize: $size / 16px;\n  @return $remSize * 1rem;\n}\n\n@mixin font-size($size) {\n  font-size: $size;\n  font-size: calculateRem($size);\n}\n\n\nhtml {\n    font-size: 32px;\n}\n\np {\n  @include font-size(14px)\n}\n\n\nh1 {\n    @include font-size(32px)\n}\n\n\n\n// -----------------------------------------\n//    Typography\n// -----------------------------------------\n\n\n\nhtml {\n  /* Change default typefaces here */\n  font-family: serif;\n  font-size: 137.5%;\n  -webkit-font-smoothing: antialiased;\n}\n/* Copy & Lists */\np {\n  line-height: 1.5rem;\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n}\nul,\nol {\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\nul li,\nol li {\n  line-height: 1.5rem;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-top: 0;\n  margin-bottom: 0;\n}\nblockquote {\n  line-height: 1.5rem;\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n/* Headings */\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  /* Change heading typefaces here */\n  font-family: sans-serif;\n  margin-bottom: 1.5rem;\n  margin-top: 0;\n  line-height: 1.5rem;\n}\nh1 {\n  font-size: 4.242rem;\n  line-height: 4.5rem;\n}\nh2 {\n  font-size: 2.828rem;\n  line-height: 3rem;\n}\nh3 {\n  font-size: 1.414rem;\n}\nh4 {\n  font-size: 0.707rem;\n}\nh5 {\n  font-size: 0.4713333333333333rem;\n}\nh6 {\n  font-size: 0.3535rem;\n}\n/* Tables */\ntable {\n  margin-top: 1.5rem;\n  border-spacing: 0px;\n  border-collapse: collapse;\n}\ntable td,\ntable th {\n  padding: 0;\n  line-height: 33px;\n}\n/* Code blocks */\ncode {\n  vertical-align: bottom;\n}\n/* Leading paragraph text */\n.lead {\n  font-size: 1.414rem;\n}\n/* Hug the block above you */\n.hug {\n  margin-top: 0;\n}\n\n\naside.widget-area {\n    \n    h2 { \n      @include font-size(16px)\n      font-weight: bold;\n    }\n\n}\n\n\n","// -----------------------------------------\n//     Susy setup\n// -----------------------------------------\n\n/* Changing Susy default global settings */\n\n$susy: (\n  columns: 12,\n  gutters: .25,\n  container: 1024px,\n  /* Tells Susy to use border-box */\n  global-box-sizing: border-box,\n  debug: (image: show)\n);\n\n\n\n// ==========================================================\n// LAYOUT \n// ==========================================================\n\n\n\n.site-wrapper {\n    width: 100%;\n    margin: 0 auto;\n}\n\n\n.site-header,\n.site-content,\n.site-footer {\n  @include container();\n  margin: 0 auto;\n}\n\n.content-area {\n  @include span(8); \n}\n\n.widget-area {\n  @include span(4 last); \n}\n\n\n// ==========================================================\n// Header \n// ==========================================================\n\n.site-header {\n    display: block;\n    width: 100%;\n    height: 72px;\n    // background: yellow;\n}\n\n.site-branding  {\n  float: left;\n  display: block;\n  width: 25%;\n  height: 72px;\n  // background: red;\n}\n\n.site-logo  {\n  display: block;\n  width: 100%;\n  height: auto;\n  \n}\n\n.site-logo a {\n  display: block;\n  width: 100%;\n  height: auto;\n  padding: 26px 0;\n}\n\n\n// site banner\n\n.site-banner {\n  width: 100%;\n  height: 450px;\n  background: url('../images/banner-023.jpg') no-repeat center center;\n  background-size: cover;\n} \n\n.site-banner.sticky {\n  // set animation\n  height: 100px;\n    -webkit-transition: all 0.8s ease;\n    transition: all 0.8s ease;\n}\n\n\n// ==========================================================\n// Nav \n// ==========================================================\n\n\n.main-navigation {\n  display: inline-block;\n  width: 75%;\n  height: 72px;\n}\n\n.main-navigation > div {\n  display: block;\n  width: 100%;\n  height: auto;\n  overflow: hidden;\n}\n\nul#primary-menu {\n  float: right;\n  display: block;\n  margin: 0;\n  padding: 19px 0;\n}\n\nul#primary-menu li {\n  display: inline-block;\n  margin-left: 20px;\n  float: left;\n\n}\n\nul#primary-menu li a {\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif; \n  font-weight: bold;\n  font-size: 16px;\n  font-style: normal;\n  font-variant: normal;\n  line-height: 24px;\n  text-decoration: none;\n}\n\n// ==========================================================\n// Nav \n// ==========================================================\n\n\n\n\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Background Properties\n// =====================\n\n// Susy Background Image\n// ---------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-image>\n@mixin susy-background-image(\n  $image\n) {\n  @if susy-support(background-image, (mixin: background-image), $warn: false) {\n    @include background-image($image...);\n  } @else {\n    background-image: $image;\n  }\n}\n\n// Susy Background Size\n// ---------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-size>\n@mixin susy-background-size(\n  $size\n) {\n  @if susy-support(background-options, (mixin: background-size)) {\n    @include background-size($size);\n  } @else {\n    background-size: $size;\n  }\n}\n\n// Susy Background Origin\n// ----------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-origin>\n@mixin susy-background-origin(\n  $origin\n) {\n  @if susy-support(background-options, (mixin: background-origin)) {\n    @include background-origin($origin);\n  } @else {\n    background-origin: $origin;\n  }\n}\n\n// Susy Background Clip\n// --------------------\n// Check for an existing support mixin, or provide a simple fallback.\n// - $image: <background-clip>\n@mixin susy-background-clip(\n  $clip\n) {\n  @if susy-support(background-options, (mixin: background-clip)) {\n    @include background-clip($clip);\n  } @else {\n    background-clip: $clip;\n  }\n}\n","// Background Grid Syntax\n// ======================\n\n$susy-overlay-grid-head-exists: false;\n\n\n// Show Grid/s\n// -----------\n// Show grid on any element using either background or overlay.\n// - [$grid]  : <settings>\n@mixin show-grid(\n  $grid: $susy\n) {\n  $inspect: $grid;\n  $_output: debug-get(output, $grid);\n\n  @include susy-inspect(show-grid, $inspect);\n  @if $_output == overlay and susy-get(debug image, $grid) != hide {\n    @include overlay-grid($grid);\n  } @else {\n    @include background-grid($grid);\n  }\n}\n\n@mixin show-grids(\n  $grid: $susy\n) {\n  @include show-grid($grid);\n}\n\n// Background Grid\n// ---------------\n// Show a grid background on any element.\n// - [$grid]  : <settings>\n@mixin background-grid(\n  $grid: $susy\n) {\n  $inspect  : $grid;\n  $_output  : get-background($grid);\n\n  @if length($_output) > 0 {\n    $_flow: susy-get(flow, $grid);\n\n    $_image: ();\n    @each $name, $layer in map-get($_output, image) {\n      $_direction: if($name == baseline, to bottom, to to($_flow));\n      $_image: append($_image, linear-gradient($_direction, $layer), comma);\n    }\n    $_output: map-merge($_output, (image: $_image));\n\n    @include background-grid-output($_output...);\n    @include susy-inspect(background-grid, $inspect);\n  }\n}\n\n\n// Overlay Grid\n// ------------\n// Generate an icon to trigger grid-overlays on any given elements.\n// $grids...  : <selector> [<settings>] [, <selector>]*\n@mixin overlay-grid (\n  $grid: $susy\n) {\n  @if not($susy-overlay-grid-head-exists) {\n    @at-root head { @include overlay-head($grid); }\n    @at-root head:before { @include overlay-trigger; }\n    @at-root head:hover { @include overlay-trigger-hover; }\n    $susy-overlay-grid-head-exists: true !global;\n  }\n\n  head:hover ~ &,\n  head:hover ~ body & {\n    position: relative;\n    &:before {\n      @include grid-overlay-base;\n      @include background-grid($grid);\n    }\n  }\n}\n\n\n// [Private] Overlay Trigger\n// -------------------------\n@mixin overlay-trigger {\n  content: \"|||\";\n  display: block;\n  padding: 5px 10px;\n  font: {\n    family: sans-serif;\n    size: 16px;\n    weight: bold;\n  }\n}\n\n\n// [Private] Overlay Trigger Hover\n// -------------------------------\n@mixin overlay-trigger-hover {\n  background: rgba(white, .5);\n  color: red;\n}\n\n\n// [Private] Overlay Head\n// ----------------------\n// <head> styles to create grid overlay toggle\n@mixin overlay-head (\n  $grid: $susy\n) {\n  $_toggle: debug-get(toggle, $grid);\n  $_horz: null;\n  $_vert: null;\n\n  @each $side in $_toggle {\n    $_horz: if($side == left or $side == right, $side, $_horz);\n    $_vert: if($side == top or $side == bottom, $side, $_vert);\n  }\n\n  display: block;\n  position: fixed;\n  #{$_horz}: 10px;\n  #{$_vert}: 10px;\n  z-index: 999;\n  color: #333;\n  background: rgba(white, .25);\n}\n\n\n// [Private] Grid Overlay Base\n// ---------------------------\n// Base styles for generating a grid overlay\n@mixin grid-overlay-base() {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  content: \" \";\n  z-index: 998;\n}\n\n\n// Get Symmetrical Background\n// --------------------------\n// - $grid: <map>\n@function get-background-sym(\n  $grid\n) {\n  $grid           : parse-grid($grid);\n  $_gutters       : susy-get(gutters, $grid);\n  $_column-width  : susy-get(column-width, $grid);\n  $_math          : susy-get(math, $grid);\n\n  $_color         : debug-get(color);\n  $_trans         : transparent;\n  $_light         : lighten($_color, 15%);\n\n  $_end           : 1 + $_gutters;\n  $_after         : percentage(1/$_end);\n  $_stops         : ();\n  $_size          : span(1 $grid wide);\n\n  @if is-inside($grid) {\n    $_stops: $_color, $_light;\n  } @else if is-split($grid) {\n    $_split: $_gutters/2;\n    $_before: percentage($_split/$_end);\n    $_after: percentage((1 + $_split)/$_end);\n    $_stops: $_trans $_before, $_color $_before, $_light $_after, $_trans $_after;\n  } @else {\n    $_stops: $_color, $_light $_after, $_trans $_after;\n  }\n\n  @if $_math == static {\n    $_size: valid-column-math($_math, $_column-width) * $_end;\n  }\n\n  $_output: (\n    image: (columns: $_stops),\n    size: $_size,\n  );\n\n  @return $_output;\n}\n\n\n// Get Asymmetrical Inside\n// -----------------------\n// - $grid: <settings>\n@function get-asym-inside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n      $this-stop: append($this-stop, $_light $_end, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Split\n// ----------------------\n// - $grid: <settings>\n@function get-asym-split(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    $start: parse-span(1 at $location $grid);\n    $start: get-isolation($start);\n    $this-stop: append($this-stop, transparent $start, comma);\n    $this-stop: append($this-stop, $_color $start, comma);\n\n    $_end: $start + span(1 at $location $grid);\n    $this-stop: append($this-stop, $_light $_end, comma);\n    $this-stop: append($this-stop, transparent $_end, comma);\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Outside\n// ------------------------\n// - $grid: <settings>\n@function get-asym-outside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_trans   : transparent;\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $gutter: get-span-width(first $location $grid);\n\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n\n      $gutter: $_light $gutter, $_trans $gutter, $_trans $_end;\n      $this-stop: join($this-stop, $gutter, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Background\n// ---------------------------\n// - $grid: <settings>\n@function get-background-asym(\n  $grid\n) {\n  $_stops: ();\n\n  @if is-inside($grid) {\n    $_stops: get-asym-inside($grid);\n  } @else if is-split($grid) {\n    $_stops: get-asym-split($grid);\n  } @else {\n    $_stops: get-asym-outside($grid);\n  }\n\n  @return (image: (columns: $_stops));\n}\n\n\n// Get Background\n// --------------\n// - $grid: <settings>\n@function get-background(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_show    : susy-get(debug image, $grid);\n  $_return  : ();\n\n  @if $_show and $_show != 'hide' {\n    $_columns: susy-get(columns, $grid);\n\n    @if $_show != 'show-baseline' {\n      $_sym: is-symmetrical($_columns);\n      $_return: if($_sym, get-background-sym($grid), get-background-asym($grid));\n      $_return: map-merge($_return, (clip: content-box));\n    }\n\n    @if $_show != 'show-columns'\n      and global-variable-exists(base-line-height)\n      and type-of($base-line-height) == 'number'\n      and not unitless($base-line-height) {\n      $_color: variable-exists('grid-background-baseline-color');\n      $_color: if($_color, $grid-background-baseline-color, #000);\n\n      $_image: map-get($_return, image);\n      $_size: map-get($_return, size);\n      $_baseline: (baseline: ($_color 1px, transparent 1px));\n      $_baseline-size: 100% $base-line-height;\n\n      $_return: map-merge($_return, (\n        image: if($_image, map-merge($_image, $_baseline), $_baseline),\n        size: if($_size, ($_size, $_baseline-size), $_baseline-size),\n      ));\n\n      @if $_show == 'show' {\n        $_clip: map-get($_return, clip);\n        $_return: map-merge($_return, (clip: join($_clip, border-box, comma)));\n      }\n    } @else if $_show == 'show-baseline' {\n      @warn 'Please provide a $base-line-height with the desired height and units';\n    }\n  }\n\n  @if map-get($_return, image) {\n    $_return: map-merge($_return, (flow: susy-get(flow, $grid)));\n  }\n\n  @return $_return;\n}\n\n\n// Get Debug\n// ---------\n// Return the value of a debug setting\n// - $key: <setting>\n@function debug-get(\n  $key,\n  $grid: $susy\n) {\n  $key: join(debug, $key, space);\n  @return susy-get($key, $grid);\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Grid Background API\n// ===================\n// - Sub-pixel rounding can lead to several pixels variation between browsers.\n\n// Grid Background Output\n// ----------------------\n// - $image: background-image\n// - $size: background-size\n// - $clip: background-clip\n// - [$flow]: ltr | rtl\n@mixin background-grid-output (\n  $image,\n  $size: null,\n  $clip: null,\n  $flow: map-get($susy-defaults, flow)\n) {\n  $output: (\n    background-image: $image,\n    background-size: $size,\n    background-origin: $clip,\n    background-clip: $clip,\n    background-position: from($flow) top,\n  );\n\n  @include output($output);\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","button.menu-toggle {display:none;} \n","@import \"reset-scss/reset.scss\";\n@import \"variables\";\n@import \"utils\";\n@import \"susy/sass/_susy.scss\";\n@import \"typography\";\n@import \"layout\";\n@import \"shame\";\n\n\n// reset and susy are bower components \n\n\n// hide screen reader link\n.screen-reader-text {\n    clip: rect(1px, 1px, 1px, 1px);\n    position: absolute !important;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n}\n\n\n\n// -----------------------------------------\n//     Table of contents\n// -----------------------------------------\n\n\n// base.scss – contains global styles, such as resets, typography, colors, etc.\n// components.scss – contains each self-contained component in its own .scss partial\n// layout.scss – contains styling for larger layout components; e.g. nav, header, footer, etc.\n// pages.scss – contains page-specific styling, if necessary\n// themes.scss – contains styling for different themes\n// utils.scss – contains global mixins, functions, helper selectors, etc.\n// vendors.scss – contains 3rd-party styles, mixins, etc.\n// main.scss – output file that brings together all of the above parts\n\n// -----------------------------------------\n//     Main styles\n// -----------------------------------------\n\n.testing {\n  // Percentage is a Sass function\n  width: percentage(5/7);\n}\n\n.test {\n    border-radius: 25px;\n    box-shadow: 10px 10px;\n    opacity: 0.5;\n    display: flex;\n    transform: scale(0.5);\n    column-count: 4;\n\n}\n\nh1 {\n    color: $brand-color;\n    opacity: 0.5;\n}\n\n\n.fat_header {\n    color: $brand-80-color;\n    display: flex;\n}\n\n\n\n.page_wrapper {\n     @include container;\n     margin: 0 auto;\n}\n\n\n\nbody {\n  background-color: $base-color;\n  margin: 0;\n  padding: 0;\n}\n\n\n// -----------------------------------------\n//     Header \n// -----------------------------------------\n\n.main-header {\n  position: fixed;\n  width: 100%;\n  text-align: center;\n  font-size: 72px;\n  line-height: 108px;\n  height: 108px;\n  background: #335C7D;\n  color: #fff;\n  font-family: 'PT Sans', sans-serif;\n}\n\n// header {\n//     position: fixed;\n//     left: 0;\n//     right: 0;\n//     margin: 0 auto;\n\n//     display: block;\n//     width: 960px;\n//     height: 72px;\n\n\n//     text-align: center;\n//     font-size: 72px;\n//     line-height: 108px;\n    \n//     background: #335C7D;\n//     color: #fff;\n//     font-family: 'PT Sans', sans-serif;\n    \n//     // set animation\n//     -webkit-transition: all 0.4s ease;\n//     transition: all 0.4s ease;\n// }\n\n// header.sticky {\n//     position: fixed;\n//     left: 0;\n//     right: 0;\n//     margin: 0 auto;\n//     font-size: 24px;\n//     line-height: 48px;\n//     height: 48px; \n//     width: 960px;\n//     background: green;\n//     text-align: left;\n    \n// }\n\n.hero-image {\n  width: 100%;\n  height: 50vh;\n  background: yellow;\n  \n  border-top: 2px solid red;\n}\n\n\n\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 1;\n}\n\n ","\n\n// Base colors\n// --------------\n\n$base-color: #ededed;\n$brand-color: #454545;\n$accent-color: yellow;\n$brand-80-color: rgba($base-color, 0.8);\n$accent-color: yellow;\n\n// 2. Breakpoints\n// --------------\n\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n);\n\n$breakpoint-classes: (small medium large);\n\n// $tablet-width: 768px;\n// $desktop-width: 1024px;\n// $wide-width: 1280px;\n\n\n// -----------------------------------------\n//    Typography\n// -----------------------------------------\n\n$base-font-size: 16px;\n$base-line-height: 1.3;\n$scale: 1.5;\n\n// Mixin\n@mixin center-block {\n   display: block;\n   margin-left: auto;\n   margin-right: auto;\n }\n\n\n\n\n \n"],"sourceRoot":"/source/"}